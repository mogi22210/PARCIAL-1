from admin import Admin
from student import Student
from bike import Bike
from equipment import Equipment
from library import Library

class CampusPlatform:
    def __init__(self):
        self.students = []
        self.admins = []
        self.bikes = []
        self.equipment = []
        self.library = []
        
    def admin_menu(self, admin_username):
        """
        Muestra el menú de acciones para el administrador.
        """
        print("\n--- Admin Actions ---")
        print("1. Generate Reports")
        print("2. Manage Bikes")
        print("3. Manage Equipment")
        print("4. Logout")

        admin_action = input("Select an action: ")

        if admin_action == "1":
            self.generate_reports(admin_username)
        elif admin_action == "2":
            self.manage_bikes()
        elif admin_action == "3":
            self.manage_equipment()
        elif admin_action == "4":
            print("Admin logged out successfully.")
            return False
        else:
            print("Invalid option. Please try again.")

    def manage_bikes(self):
        """
        Permite al administrador gestionar las bicicletas.
        """
        print("\n--- Manage Bikes ---")
        print("1. Add Bike")
        print("2. Remove Bike")
        print("3. Go back to admin menu")

        bike_option = input("Select an option: ")
        if bike_option == "1":
            bike_id = input("Enter bike ID: ")
            self.add_bike(Bike(bike_id))
        elif bike_option == "2":
            bike_id = input("Enter bike ID to remove: ")
            self.remove_bike(bike_id)
        elif bike_option == "3":
            pass
        else:
            print("Invalid option. Please try again.")

    def manage_equipment(self):
        """
        Permite al administrador gestionar el equipo.
        """
        print("\n--- Manage Equipment ---")
        print("1. Add Equipment")
        print("2. Remove Equipment")
        print("3. Go back to admin menu")

        equipment_option = input("Select an option: ")
        if equipment_option == "1":
            equipment_name = input("Enter equipment name: ")
            self.add_equipment(Equipment(equipment_name))
        elif equipment_option == "2":
            equipment_name = input("Enter equipment name to remove: ")
            self.remove_equipment(equipment_name)
        elif equipment_option == "3":
            pass
        else:
            print("Invalid option. Please try again.")

    def register_student(self, student_id, student_name, user, password):
        new_student = Student(student_id, student_name, user, password)
        self.students.append(new_student)
        print("Student registered successfully.")

    def add_admin(self, admin):
        self.admins.append(admin)
        print("Admin added successfully.")

    def admin_login(self, username, password):
        for admin in self.admins:
            if admin.username == username and admin.password == password:
                return True
        return False

    def student_login(self, user, password):
        for student in self.students:
            if student.user == user and student.password == password:
                print(f"Student {student.name} logged in successfully.")
                return student
        print("Student not found.")

    def reserve_bike(self, student_id):
        bike_id = int(input("Enter bike ID: "))
        for bike in self.bikes:
            if bike.bike_id == bike_id and bike.available:
                print(f"Bike {bike_id} reserved successfully for student {student_id}.")
                bike.available = False
                return
        print("Bike not available or not found.")

    def request_equipment(self, student_id):
        equipment_name = input("Enter equipment name: ")
        for equipment in self.equipment:
            if equipment.name == equipment_name:
                print(f"Equipment {equipment_name} requested successfully by student {student_id}.")
                return
        print("Equipment not found.")

    def generate_reports(self, admin_username):
        print(f"Usage report generated by admin {admin_username}:")

        # Usabilidad de productos
        print("Product usability report:")
        for equipment in self.equipment:
            print(f"- {equipment.name}")

        # Compras recientes
        print("Recent purchases report:")
        # Aquí iría la lógica para obtener las compras recientes

        # Reservas de bicicletas
        print("Bike reservation report:")
        for bike in self.bikes:
            if not bike.available:
                print(f"- Bike {bike.bike_id}")

    def buy_stationery(self, student_id):
        item = input("Enter item name: ")
        print(f"Student {student_id} bought {item}.")
            
    def access_library(self):
        """
        Permite al estudiante acceder a la librería virtual para reservar libros.
        """
        print("\n--- Library ---")
        print("Available Books:")
        for i, library in enumerate(self.library, start=1):
            print(f"{i}. {library.title} - {library.author}")

        book_choice = input("Enter the number of the book you want to reserve (or '0' to go back): ")
        if book_choice == "0":
            return
        try:
            book_choice = int(book_choice)
            if 1 <= book_choice <= len(self.library):
                selected_book = self.library[book_choice - 1]
                self.reserve_book(selected_book)
                print(f"Book '{selected_book.title}' reserved successfully!")
            else:
                print("Invalid book number. Please try again.")
        except ValueError:
            print("Invalid input. Please enter a number.")

    def manage_books(self):
        """
        Permite al administrador gestionar los libros en la librería.
        """
        print("\n--- Manage Books ---")
        print("Available Books:")
        for i, library in enumerate(self.library, start=1):
            print(f"{i}. {library.title} - {library.author}")

        book_choice = input("Enter the number of the book you want to manage (or '0' to go back): ")
        if book_choice == "0":
            return
        try:
            book_choice = int(book_choice)
            if 1 <= book_choice <= len(self.library):
                selected_book = self.library[book_choice - 1]
                action = input("Do you want to remove this book? (yes/no): ").lower()
                if action == "yes":
                    self.library.remove(selected_book)
                    print(f"Book '{selected_book.title}' removed from the library.")
                elif action == "no":
                    print("No changes made.")
                else:
                    print("Invalid input. Please enter 'yes' or 'no'.")
            else:
                print("Invalid book number. Please try again.")
        except ValueError:
            print("Invalid input. Please enter a number.")
            
    def add_bike(self, bike):
        """
        Agrega una bicicleta a la plataforma del campus.
        """
        self.bikes.append(bike)
        print(f"Bike {bike.bike_id} added successfully.")

    def remove_bike(self, bike_id):
        """
        Elimina una bicicleta de la plataforma del campus.
        """
        for bike in self.bikes:
            if bike.bike_id == bike_id:
                self.bikes.remove(bike)
                print(f"Bike {bike_id} removed successfully.")
                return
        print("Bike not found.")

    def add_equipment(self, equipment):
        """
        Agrega un equipo a la plataforma del campus.
        """
        self.equipment.append(equipment)
        print(f"Equipment '{equipment.name}' added successfully.")

    def remove_equipment(self, equipment_name):
        """
        Elimina un equipo de la plataforma del campus.
        """
        for equipment in self.equipment:
            if equipment.name == equipment_name:
                self.equipment.remove(equipment)
                print(f"Equipment '{equipment_name}' removed successfully.")
                return
        print("Equipment not found.")
        
    def reserve_book(self, book):
        """
        Permite al estudiante reservar un libro de la librería.
        """
        self.library.append(book)

    def check_book_availability(self, book):
        return book in self.library