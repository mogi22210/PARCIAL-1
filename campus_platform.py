from admin import Admin
from student import Student
from bike import Bike
from equipment import Equipment
from library import Library

class CampusPlatform:
    def __init__(self):
        self.students = []
        self.admins = []
        self.bikes = []
        self.equipment = []
        self.library = Library()

    def register_student(self, student_id, student_name, user, password):
        new_student = Student(student_id, student_name, user, password)
        self.students.append(new_student)
        print("Student registered successfully.")

    def add_admin(self, admin):
        self.admins.append(admin)
        print("Admin added successfully.")

    def admin_login(self, username, password):
        for admin in self.admins:
            if admin.username == username and admin.password == password:
                return True
        return False

    def student_login(self, user, password):
        for student in self.students:
            if student.user == user and student.password == password:
                print(f"Student {student.name} logged in successfully.")
                return student
        print("Student not found.")

    def reserve_bike(self, student_id):
        bike_id = int(input("Enter bike ID: "))
        for bike in self.bikes:
            if bike.bike_id == bike_id and bike.available:
                print(f"Bike {bike_id} reserved successfully for student {student_id}.")
                bike.available = False
                return
        print("Bike not available or not found.")

    def request_equipment(self, student_id):
        equipment_name = input("Enter equipment name: ")
        for equipment in self.equipment:
            if equipment.name == equipment_name:
                print(f"Equipment {equipment_name} requested successfully by student {student_id}.")
                return
        print("Equipment not found.")

    def generate_reports(self, admin_username):
        print(f"Usage report generated by admin {admin_username}:")

        # Usabilidad de productos
        print("Product usability report:")
        for equipment in self.equipment:
            print(f"- {equipment.name}")

        # Compras recientes
        print("Recent purchases report:")
        # Aquí iría la lógica para obtener las compras recientes

        # Reservas de bicicletas
        print("Bike reservation report:")
        for bike in self.bikes:
            if not bike.available:
                print(f"- Bike {bike.bike_id}")

    def buy_stationery(self, student_id):
        item = input("Enter item name: ")
        print(f"Student {student_id} bought {item}.")

    def access_library(self, student_id):
        book = input("Enter book name: ")
        if self.library.check_book_availability(book):
            print(f"Student {student_id} accessed {book}.")
        else:
            print(f"{book} not found in the library.")
